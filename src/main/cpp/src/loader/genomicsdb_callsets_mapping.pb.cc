// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: genomicsdb_callsets_mapping.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "genomicsdb_callsets_mapping.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SampleIDToTileDBIDMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SampleIDToTileDBIDMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* CallsetMappingPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CallsetMappingPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* CallsetMappingPB_CallsetMapEntry_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_genomicsdb_5fcallsets_5fmapping_2eproto() {
  protobuf_AddDesc_genomicsdb_5fcallsets_5fmapping_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "genomicsdb_callsets_mapping.proto");
  GOOGLE_CHECK(file != NULL);
  SampleIDToTileDBIDMap_descriptor_ = file->message_type(0);
  static const int SampleIDToTileDBIDMap_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleIDToTileDBIDMap, sample_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleIDToTileDBIDMap, tiledb_row_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleIDToTileDBIDMap, idx_in_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleIDToTileDBIDMap, stream_name_),
  };
  SampleIDToTileDBIDMap_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SampleIDToTileDBIDMap_descriptor_,
      SampleIDToTileDBIDMap::default_instance_,
      SampleIDToTileDBIDMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleIDToTileDBIDMap, _has_bits_[0]),
      -1,
      -1,
      sizeof(SampleIDToTileDBIDMap),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleIDToTileDBIDMap, _internal_metadata_),
      -1);
  CallsetMappingPB_descriptor_ = file->message_type(1);
  static const int CallsetMappingPB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallsetMappingPB, callset_map_),
  };
  CallsetMappingPB_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CallsetMappingPB_descriptor_,
      CallsetMappingPB::default_instance_,
      CallsetMappingPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallsetMappingPB, _has_bits_[0]),
      -1,
      -1,
      sizeof(CallsetMappingPB),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallsetMappingPB, _internal_metadata_),
      -1);
  CallsetMappingPB_CallsetMapEntry_descriptor_ = CallsetMappingPB_descriptor_->nested_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_genomicsdb_5fcallsets_5fmapping_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SampleIDToTileDBIDMap_descriptor_, &SampleIDToTileDBIDMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CallsetMappingPB_descriptor_, &CallsetMappingPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        CallsetMappingPB_CallsetMapEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::SampleIDToTileDBIDMap,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                CallsetMappingPB_CallsetMapEntry_descriptor_));
}

}  // namespace

void protobuf_ShutdownFile_genomicsdb_5fcallsets_5fmapping_2eproto() {
  delete SampleIDToTileDBIDMap::default_instance_;
  delete SampleIDToTileDBIDMap_reflection_;
  delete CallsetMappingPB::default_instance_;
  delete CallsetMappingPB_reflection_;
}

void protobuf_AddDesc_genomicsdb_5fcallsets_5fmapping_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!genomicsdb_callsets_mapping.proto\"p\n\025S"
    "ampleIDToTileDBIDMap\022\023\n\013sample_name\030\001 \002("
    "\t\022\030\n\020tiledb_row_index\030\002 \002(\003\022\023\n\013idx_in_fi"
    "le\030\003 \002(\005\022\023\n\013stream_name\030\004 \001(\t\"\225\001\n\020Callse"
    "tMappingPB\0226\n\013callset_map\030\001 \003(\0132!.Callse"
    "tMappingPB.CallsetMapEntry\032I\n\017CallsetMap"
    "Entry\022\013\n\003key\030\001 \001(\t\022%\n\005value\030\002 \001(\0132\026.Samp"
    "leIDToTileDBIDMap:\0028\001B2\n\024com.intel.genom"
    "icsdbB\032GenomicsDBCallsetsMapProto", 353);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "genomicsdb_callsets_mapping.proto", &protobuf_RegisterTypes);
  SampleIDToTileDBIDMap::default_instance_ = new SampleIDToTileDBIDMap();
  CallsetMappingPB::default_instance_ = new CallsetMappingPB();
  SampleIDToTileDBIDMap::default_instance_->InitAsDefaultInstance();
  CallsetMappingPB::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_genomicsdb_5fcallsets_5fmapping_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_genomicsdb_5fcallsets_5fmapping_2eproto {
  StaticDescriptorInitializer_genomicsdb_5fcallsets_5fmapping_2eproto() {
    protobuf_AddDesc_genomicsdb_5fcallsets_5fmapping_2eproto();
  }
} static_descriptor_initializer_genomicsdb_5fcallsets_5fmapping_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int SampleIDToTileDBIDMap::kSampleNameFieldNumber;
const int SampleIDToTileDBIDMap::kTiledbRowIndexFieldNumber;
const int SampleIDToTileDBIDMap::kIdxInFileFieldNumber;
const int SampleIDToTileDBIDMap::kStreamNameFieldNumber;
#endif  // !_MSC_VER

SampleIDToTileDBIDMap::SampleIDToTileDBIDMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SampleIDToTileDBIDMap)
}

void SampleIDToTileDBIDMap::InitAsDefaultInstance() {
}

SampleIDToTileDBIDMap::SampleIDToTileDBIDMap(const SampleIDToTileDBIDMap& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SampleIDToTileDBIDMap)
}

void SampleIDToTileDBIDMap::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sample_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tiledb_row_index_ = GOOGLE_LONGLONG(0);
  idx_in_file_ = 0;
  stream_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SampleIDToTileDBIDMap::~SampleIDToTileDBIDMap() {
  // @@protoc_insertion_point(destructor:SampleIDToTileDBIDMap)
  SharedDtor();
}

void SampleIDToTileDBIDMap::SharedDtor() {
  sample_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SampleIDToTileDBIDMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SampleIDToTileDBIDMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SampleIDToTileDBIDMap_descriptor_;
}

const SampleIDToTileDBIDMap& SampleIDToTileDBIDMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_genomicsdb_5fcallsets_5fmapping_2eproto();
  return *default_instance_;
}

SampleIDToTileDBIDMap* SampleIDToTileDBIDMap::default_instance_ = NULL;

SampleIDToTileDBIDMap* SampleIDToTileDBIDMap::New(::google::protobuf::Arena* arena) const {
  SampleIDToTileDBIDMap* n = new SampleIDToTileDBIDMap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SampleIDToTileDBIDMap::Clear() {
  if (_has_bits_[0 / 32] & 15u) {
    if (has_sample_name()) {
      sample_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    tiledb_row_index_ = GOOGLE_LONGLONG(0);
    idx_in_file_ = 0;
    if (has_stream_name()) {
      stream_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SampleIDToTileDBIDMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SampleIDToTileDBIDMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sample_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sample_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sample_name().data(), this->sample_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SampleIDToTileDBIDMap.sample_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tiledb_row_index;
        break;
      }

      // required int64 tiledb_row_index = 2;
      case 2: {
        if (tag == 16) {
         parse_tiledb_row_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tiledb_row_index_)));
          set_has_tiledb_row_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_idx_in_file;
        break;
      }

      // required int32 idx_in_file = 3;
      case 3: {
        if (tag == 24) {
         parse_idx_in_file:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idx_in_file_)));
          set_has_idx_in_file();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_stream_name;
        break;
      }

      // optional string stream_name = 4;
      case 4: {
        if (tag == 34) {
         parse_stream_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stream_name().data(), this->stream_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SampleIDToTileDBIDMap.stream_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SampleIDToTileDBIDMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SampleIDToTileDBIDMap)
  return false;
#undef DO_
}

void SampleIDToTileDBIDMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SampleIDToTileDBIDMap)
  // required string sample_name = 1;
  if (has_sample_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sample_name().data(), this->sample_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SampleIDToTileDBIDMap.sample_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sample_name(), output);
  }

  // required int64 tiledb_row_index = 2;
  if (has_tiledb_row_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->tiledb_row_index(), output);
  }

  // required int32 idx_in_file = 3;
  if (has_idx_in_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->idx_in_file(), output);
  }

  // optional string stream_name = 4;
  if (has_stream_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stream_name().data(), this->stream_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SampleIDToTileDBIDMap.stream_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->stream_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SampleIDToTileDBIDMap)
}

::google::protobuf::uint8* SampleIDToTileDBIDMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SampleIDToTileDBIDMap)
  // required string sample_name = 1;
  if (has_sample_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sample_name().data(), this->sample_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SampleIDToTileDBIDMap.sample_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sample_name(), target);
  }

  // required int64 tiledb_row_index = 2;
  if (has_tiledb_row_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->tiledb_row_index(), target);
  }

  // required int32 idx_in_file = 3;
  if (has_idx_in_file()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->idx_in_file(), target);
  }

  // optional string stream_name = 4;
  if (has_stream_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stream_name().data(), this->stream_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SampleIDToTileDBIDMap.stream_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->stream_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SampleIDToTileDBIDMap)
  return target;
}

int SampleIDToTileDBIDMap::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_sample_name()) {
    // required string sample_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sample_name());
  }

  if (has_tiledb_row_index()) {
    // required int64 tiledb_row_index = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tiledb_row_index());
  }

  if (has_idx_in_file()) {
    // required int32 idx_in_file = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->idx_in_file());
  }

  return total_size;
}
int SampleIDToTileDBIDMap::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string sample_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sample_name());

    // required int64 tiledb_row_index = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tiledb_row_index());

    // required int32 idx_in_file = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->idx_in_file());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string stream_name = 4;
  if (has_stream_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_name());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SampleIDToTileDBIDMap::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SampleIDToTileDBIDMap* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SampleIDToTileDBIDMap>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SampleIDToTileDBIDMap::MergeFrom(const SampleIDToTileDBIDMap& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sample_name()) {
      set_has_sample_name();
      sample_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sample_name_);
    }
    if (from.has_tiledb_row_index()) {
      set_tiledb_row_index(from.tiledb_row_index());
    }
    if (from.has_idx_in_file()) {
      set_idx_in_file(from.idx_in_file());
    }
    if (from.has_stream_name()) {
      set_has_stream_name();
      stream_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SampleIDToTileDBIDMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SampleIDToTileDBIDMap::CopyFrom(const SampleIDToTileDBIDMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SampleIDToTileDBIDMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SampleIDToTileDBIDMap::Swap(SampleIDToTileDBIDMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SampleIDToTileDBIDMap::InternalSwap(SampleIDToTileDBIDMap* other) {
  sample_name_.Swap(&other->sample_name_);
  std::swap(tiledb_row_index_, other->tiledb_row_index_);
  std::swap(idx_in_file_, other->idx_in_file_);
  stream_name_.Swap(&other->stream_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SampleIDToTileDBIDMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SampleIDToTileDBIDMap_descriptor_;
  metadata.reflection = SampleIDToTileDBIDMap_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SampleIDToTileDBIDMap

// required string sample_name = 1;
bool SampleIDToTileDBIDMap::has_sample_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SampleIDToTileDBIDMap::set_has_sample_name() {
  _has_bits_[0] |= 0x00000001u;
}
void SampleIDToTileDBIDMap::clear_has_sample_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void SampleIDToTileDBIDMap::clear_sample_name() {
  sample_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sample_name();
}
 const ::std::string& SampleIDToTileDBIDMap::sample_name() const {
  // @@protoc_insertion_point(field_get:SampleIDToTileDBIDMap.sample_name)
  return sample_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SampleIDToTileDBIDMap::set_sample_name(const ::std::string& value) {
  set_has_sample_name();
  sample_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SampleIDToTileDBIDMap.sample_name)
}
 void SampleIDToTileDBIDMap::set_sample_name(const char* value) {
  set_has_sample_name();
  sample_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SampleIDToTileDBIDMap.sample_name)
}
 void SampleIDToTileDBIDMap::set_sample_name(const char* value, size_t size) {
  set_has_sample_name();
  sample_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SampleIDToTileDBIDMap.sample_name)
}
 ::std::string* SampleIDToTileDBIDMap::mutable_sample_name() {
  set_has_sample_name();
  // @@protoc_insertion_point(field_mutable:SampleIDToTileDBIDMap.sample_name)
  return sample_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SampleIDToTileDBIDMap::release_sample_name() {
  clear_has_sample_name();
  return sample_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SampleIDToTileDBIDMap::set_allocated_sample_name(::std::string* sample_name) {
  if (sample_name != NULL) {
    set_has_sample_name();
  } else {
    clear_has_sample_name();
  }
  sample_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sample_name);
  // @@protoc_insertion_point(field_set_allocated:SampleIDToTileDBIDMap.sample_name)
}

// required int64 tiledb_row_index = 2;
bool SampleIDToTileDBIDMap::has_tiledb_row_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SampleIDToTileDBIDMap::set_has_tiledb_row_index() {
  _has_bits_[0] |= 0x00000002u;
}
void SampleIDToTileDBIDMap::clear_has_tiledb_row_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void SampleIDToTileDBIDMap::clear_tiledb_row_index() {
  tiledb_row_index_ = GOOGLE_LONGLONG(0);
  clear_has_tiledb_row_index();
}
 ::google::protobuf::int64 SampleIDToTileDBIDMap::tiledb_row_index() const {
  // @@protoc_insertion_point(field_get:SampleIDToTileDBIDMap.tiledb_row_index)
  return tiledb_row_index_;
}
 void SampleIDToTileDBIDMap::set_tiledb_row_index(::google::protobuf::int64 value) {
  set_has_tiledb_row_index();
  tiledb_row_index_ = value;
  // @@protoc_insertion_point(field_set:SampleIDToTileDBIDMap.tiledb_row_index)
}

// required int32 idx_in_file = 3;
bool SampleIDToTileDBIDMap::has_idx_in_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SampleIDToTileDBIDMap::set_has_idx_in_file() {
  _has_bits_[0] |= 0x00000004u;
}
void SampleIDToTileDBIDMap::clear_has_idx_in_file() {
  _has_bits_[0] &= ~0x00000004u;
}
void SampleIDToTileDBIDMap::clear_idx_in_file() {
  idx_in_file_ = 0;
  clear_has_idx_in_file();
}
 ::google::protobuf::int32 SampleIDToTileDBIDMap::idx_in_file() const {
  // @@protoc_insertion_point(field_get:SampleIDToTileDBIDMap.idx_in_file)
  return idx_in_file_;
}
 void SampleIDToTileDBIDMap::set_idx_in_file(::google::protobuf::int32 value) {
  set_has_idx_in_file();
  idx_in_file_ = value;
  // @@protoc_insertion_point(field_set:SampleIDToTileDBIDMap.idx_in_file)
}

// optional string stream_name = 4;
bool SampleIDToTileDBIDMap::has_stream_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SampleIDToTileDBIDMap::set_has_stream_name() {
  _has_bits_[0] |= 0x00000008u;
}
void SampleIDToTileDBIDMap::clear_has_stream_name() {
  _has_bits_[0] &= ~0x00000008u;
}
void SampleIDToTileDBIDMap::clear_stream_name() {
  stream_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stream_name();
}
 const ::std::string& SampleIDToTileDBIDMap::stream_name() const {
  // @@protoc_insertion_point(field_get:SampleIDToTileDBIDMap.stream_name)
  return stream_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SampleIDToTileDBIDMap::set_stream_name(const ::std::string& value) {
  set_has_stream_name();
  stream_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SampleIDToTileDBIDMap.stream_name)
}
 void SampleIDToTileDBIDMap::set_stream_name(const char* value) {
  set_has_stream_name();
  stream_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SampleIDToTileDBIDMap.stream_name)
}
 void SampleIDToTileDBIDMap::set_stream_name(const char* value, size_t size) {
  set_has_stream_name();
  stream_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SampleIDToTileDBIDMap.stream_name)
}
 ::std::string* SampleIDToTileDBIDMap::mutable_stream_name() {
  set_has_stream_name();
  // @@protoc_insertion_point(field_mutable:SampleIDToTileDBIDMap.stream_name)
  return stream_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SampleIDToTileDBIDMap::release_stream_name() {
  clear_has_stream_name();
  return stream_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SampleIDToTileDBIDMap::set_allocated_stream_name(::std::string* stream_name) {
  if (stream_name != NULL) {
    set_has_stream_name();
  } else {
    clear_has_stream_name();
  }
  stream_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_name);
  // @@protoc_insertion_point(field_set_allocated:SampleIDToTileDBIDMap.stream_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CallsetMappingPB::kCallsetMapFieldNumber;
#endif  // !_MSC_VER

CallsetMappingPB::CallsetMappingPB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CallsetMappingPB)
}

void CallsetMappingPB::InitAsDefaultInstance() {
}

CallsetMappingPB::CallsetMappingPB(const CallsetMappingPB& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CallsetMappingPB)
}

void CallsetMappingPB::SharedCtor() {
  _cached_size_ = 0;
  callset_map_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  callset_map_.SetEntryDescriptor(
      &::CallsetMappingPB_CallsetMapEntry_descriptor_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CallsetMappingPB::~CallsetMappingPB() {
  // @@protoc_insertion_point(destructor:CallsetMappingPB)
  SharedDtor();
}

void CallsetMappingPB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CallsetMappingPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CallsetMappingPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CallsetMappingPB_descriptor_;
}

const CallsetMappingPB& CallsetMappingPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_genomicsdb_5fcallsets_5fmapping_2eproto();
  return *default_instance_;
}

CallsetMappingPB* CallsetMappingPB::default_instance_ = NULL;

CallsetMappingPB* CallsetMappingPB::New(::google::protobuf::Arena* arena) const {
  CallsetMappingPB* n = new CallsetMappingPB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CallsetMappingPB::Clear() {
  callset_map_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CallsetMappingPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CallsetMappingPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .SampleIDToTileDBIDMap> callset_map = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_callset_map:
          ::google::protobuf::scoped_ptr<CallsetMappingPB_CallsetMapEntry> entry(callset_map_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_callset_map())[entry->key()].Swap(entry->mutable_value());
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            entry->key().data(), entry->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CallsetMappingPB.CallsetMapEntry.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_callset_map;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CallsetMappingPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CallsetMappingPB)
  return false;
#undef DO_
}

void CallsetMappingPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CallsetMappingPB)
  // map<string, .SampleIDToTileDBIDMap> callset_map = 1;
  {
    ::google::protobuf::scoped_ptr<CallsetMappingPB_CallsetMapEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::SampleIDToTileDBIDMap >::const_iterator
        it = this->callset_map().begin();
        it != this->callset_map().end(); ++it) {
      entry.reset(callset_map_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          1, *entry, output);
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "CallsetMappingPB.CallsetMapEntry.key");
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CallsetMappingPB)
}

::google::protobuf::uint8* CallsetMappingPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CallsetMappingPB)
  // map<string, .SampleIDToTileDBIDMap> callset_map = 1;
  {
    ::google::protobuf::scoped_ptr<CallsetMappingPB_CallsetMapEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::SampleIDToTileDBIDMap >::const_iterator
        it = this->callset_map().begin();
        it != this->callset_map().end(); ++it) {
      entry.reset(callset_map_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              1, *entry, target);
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "CallsetMappingPB.CallsetMapEntry.key");
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CallsetMappingPB)
  return target;
}

int CallsetMappingPB::ByteSize() const {
  int total_size = 0;

  // map<string, .SampleIDToTileDBIDMap> callset_map = 1;
  total_size += 1 * this->callset_map_size();
  {
    ::google::protobuf::scoped_ptr<CallsetMappingPB_CallsetMapEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::SampleIDToTileDBIDMap >::const_iterator
        it = this->callset_map().begin();
        it != this->callset_map().end(); ++it) {
      entry.reset(callset_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CallsetMappingPB::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CallsetMappingPB* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CallsetMappingPB>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CallsetMappingPB::MergeFrom(const CallsetMappingPB& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  callset_map_.MergeFrom(from.callset_map_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CallsetMappingPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CallsetMappingPB::CopyFrom(const CallsetMappingPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallsetMappingPB::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->callset_map())) return false;
  return true;
}

void CallsetMappingPB::Swap(CallsetMappingPB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CallsetMappingPB::InternalSwap(CallsetMappingPB* other) {
  callset_map_.Swap(&other->callset_map_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CallsetMappingPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CallsetMappingPB_descriptor_;
  metadata.reflection = CallsetMappingPB_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CallsetMappingPB

// map<string, .SampleIDToTileDBIDMap> callset_map = 1;
int CallsetMappingPB::callset_map_size() const {
  return callset_map_.size();
}
void CallsetMappingPB::clear_callset_map() {
  callset_map_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::SampleIDToTileDBIDMap >&
CallsetMappingPB::callset_map() const {
  // @@protoc_insertion_point(field_map:CallsetMappingPB.callset_map)
  return callset_map_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::SampleIDToTileDBIDMap >*
CallsetMappingPB::mutable_callset_map() {
  // @@protoc_insertion_point(field_mutable_map:CallsetMappingPB.callset_map)
  return callset_map_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
