// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: genomicsdb_vid_mapping.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "genomicsdb_vid_mapping.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* InfoField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InfoField_reflection_ = NULL;
const ::google::protobuf::Descriptor* Chromosome_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Chromosome_reflection_ = NULL;
const ::google::protobuf::Descriptor* VidMappingPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VidMappingPB_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_genomicsdb_5fvid_5fmapping_2eproto() {
  protobuf_AddDesc_genomicsdb_5fvid_5fmapping_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "genomicsdb_vid_mapping.proto");
  GOOGLE_CHECK(file != NULL);
  InfoField_descriptor_ = file->message_type(0);
  static const int InfoField_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoField, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoField, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoField, vcf_field_class_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoField, length_),
  };
  InfoField_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InfoField_descriptor_,
      InfoField::default_instance_,
      InfoField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoField, _has_bits_[0]),
      -1,
      -1,
      sizeof(InfoField),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoField, _internal_metadata_),
      -1);
  Chromosome_descriptor_ = file->message_type(1);
  static const int Chromosome_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chromosome, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chromosome, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chromosome, tiledb_column_offset_),
  };
  Chromosome_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Chromosome_descriptor_,
      Chromosome::default_instance_,
      Chromosome_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chromosome, _has_bits_[0]),
      -1,
      -1,
      sizeof(Chromosome),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chromosome, _internal_metadata_),
      -1);
  VidMappingPB_descriptor_ = file->message_type(2);
  static const int VidMappingPB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VidMappingPB, infofields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VidMappingPB, chromosomes_),
  };
  VidMappingPB_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VidMappingPB_descriptor_,
      VidMappingPB::default_instance_,
      VidMappingPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VidMappingPB, _has_bits_[0]),
      -1,
      -1,
      sizeof(VidMappingPB),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VidMappingPB, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_genomicsdb_5fvid_5fmapping_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InfoField_descriptor_, &InfoField::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Chromosome_descriptor_, &Chromosome::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VidMappingPB_descriptor_, &VidMappingPB::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_genomicsdb_5fvid_5fmapping_2eproto() {
  delete InfoField::default_instance_;
  delete InfoField_reflection_;
  delete Chromosome::default_instance_;
  delete Chromosome_reflection_;
  delete VidMappingPB::default_instance_;
  delete VidMappingPB_reflection_;
}

void protobuf_AddDesc_genomicsdb_5fvid_5fmapping_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034genomicsdb_vid_mapping.proto\"P\n\tInfoFi"
    "eld\022\014\n\004name\030\001 \002(\t\022\014\n\004type\030\002 \002(\t\022\027\n\017vcf_f"
    "ield_class\030\003 \003(\t\022\016\n\006length\030\004 \001(\t\"H\n\nChro"
    "mosome\022\014\n\004name\030\001 \002(\t\022\016\n\006length\030\002 \002(\003\022\034\n\024"
    "tiledb_column_offset\030\003 \002(\003\"P\n\014VidMapping"
    "PB\022\036\n\ninfofields\030\001 \003(\0132\n.InfoField\022 \n\013ch"
    "romosomes\030\002 \003(\0132\013.ChromosomeB-\n\024com.inte"
    "l.genomicsdbB\025GenomicsDBVidMapProto", 315);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "genomicsdb_vid_mapping.proto", &protobuf_RegisterTypes);
  InfoField::default_instance_ = new InfoField();
  Chromosome::default_instance_ = new Chromosome();
  VidMappingPB::default_instance_ = new VidMappingPB();
  InfoField::default_instance_->InitAsDefaultInstance();
  Chromosome::default_instance_->InitAsDefaultInstance();
  VidMappingPB::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_genomicsdb_5fvid_5fmapping_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_genomicsdb_5fvid_5fmapping_2eproto {
  StaticDescriptorInitializer_genomicsdb_5fvid_5fmapping_2eproto() {
    protobuf_AddDesc_genomicsdb_5fvid_5fmapping_2eproto();
  }
} static_descriptor_initializer_genomicsdb_5fvid_5fmapping_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int InfoField::kNameFieldNumber;
const int InfoField::kTypeFieldNumber;
const int InfoField::kVcfFieldClassFieldNumber;
const int InfoField::kLengthFieldNumber;
#endif  // !_MSC_VER

InfoField::InfoField()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InfoField)
}

void InfoField::InitAsDefaultInstance() {
}

InfoField::InfoField(const InfoField& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:InfoField)
}

void InfoField::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  length_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InfoField::~InfoField() {
  // @@protoc_insertion_point(destructor:InfoField)
  SharedDtor();
}

void InfoField::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  length_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void InfoField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InfoField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InfoField_descriptor_;
}

const InfoField& InfoField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_genomicsdb_5fvid_5fmapping_2eproto();
  return *default_instance_;
}

InfoField* InfoField::default_instance_ = NULL;

InfoField* InfoField::New(::google::protobuf::Arena* arena) const {
  InfoField* n = new InfoField;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InfoField::Clear() {
  if (_has_bits_[0 / 32] & 11u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_type()) {
      type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_length()) {
      length_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  vcf_field_class_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InfoField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InfoField)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "InfoField.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // required string type = 2;
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "InfoField.type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_vcf_field_class;
        break;
      }

      // repeated string vcf_field_class = 3;
      case 3: {
        if (tag == 26) {
         parse_vcf_field_class:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_vcf_field_class()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vcf_field_class(this->vcf_field_class_size() - 1).data(),
            this->vcf_field_class(this->vcf_field_class_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "InfoField.vcf_field_class");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_vcf_field_class;
        if (input->ExpectTag(34)) goto parse_length;
        break;
      }

      // optional string length = 4;
      case 4: {
        if (tag == 34) {
         parse_length:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_length()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->length().data(), this->length().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "InfoField.length");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InfoField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InfoField)
  return false;
#undef DO_
}

void InfoField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InfoField)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "InfoField.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "InfoField.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // repeated string vcf_field_class = 3;
  for (int i = 0; i < this->vcf_field_class_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vcf_field_class(i).data(), this->vcf_field_class(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "InfoField.vcf_field_class");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->vcf_field_class(i), output);
  }

  // optional string length = 4;
  if (has_length()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->length().data(), this->length().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "InfoField.length");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->length(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:InfoField)
}

::google::protobuf::uint8* InfoField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:InfoField)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "InfoField.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "InfoField.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // repeated string vcf_field_class = 3;
  for (int i = 0; i < this->vcf_field_class_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vcf_field_class(i).data(), this->vcf_field_class(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "InfoField.vcf_field_class");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->vcf_field_class(i), target);
  }

  // optional string length = 4;
  if (has_length()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->length().data(), this->length().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "InfoField.length");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->length(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InfoField)
  return target;
}

int InfoField::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_type()) {
    // required string type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  return total_size;
}
int InfoField::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string length = 4;
  if (has_length()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->length());
  }

  // repeated string vcf_field_class = 3;
  total_size += 1 * this->vcf_field_class_size();
  for (int i = 0; i < this->vcf_field_class_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->vcf_field_class(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InfoField::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InfoField* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InfoField>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InfoField::MergeFrom(const InfoField& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  vcf_field_class_.MergeFrom(from.vcf_field_class_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (from.has_length()) {
      set_has_length();
      length_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.length_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InfoField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfoField::CopyFrom(const InfoField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoField::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void InfoField::Swap(InfoField* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InfoField::InternalSwap(InfoField* other) {
  name_.Swap(&other->name_);
  type_.Swap(&other->type_);
  vcf_field_class_.UnsafeArenaSwap(&other->vcf_field_class_);
  length_.Swap(&other->length_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InfoField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InfoField_descriptor_;
  metadata.reflection = InfoField_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InfoField

// required string name = 1;
bool InfoField::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InfoField::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void InfoField::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void InfoField::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& InfoField::name() const {
  // @@protoc_insertion_point(field_get:InfoField.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InfoField::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InfoField.name)
}
 void InfoField::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InfoField.name)
}
 void InfoField::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InfoField.name)
}
 ::std::string* InfoField::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:InfoField.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InfoField::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InfoField::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:InfoField.name)
}

// required string type = 2;
bool InfoField::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InfoField::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void InfoField::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void InfoField::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
 const ::std::string& InfoField::type() const {
  // @@protoc_insertion_point(field_get:InfoField.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InfoField::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InfoField.type)
}
 void InfoField::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InfoField.type)
}
 void InfoField::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InfoField.type)
}
 ::std::string* InfoField::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:InfoField.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InfoField::release_type() {
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InfoField::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:InfoField.type)
}

// repeated string vcf_field_class = 3;
int InfoField::vcf_field_class_size() const {
  return vcf_field_class_.size();
}
void InfoField::clear_vcf_field_class() {
  vcf_field_class_.Clear();
}
 const ::std::string& InfoField::vcf_field_class(int index) const {
  // @@protoc_insertion_point(field_get:InfoField.vcf_field_class)
  return vcf_field_class_.Get(index);
}
 ::std::string* InfoField::mutable_vcf_field_class(int index) {
  // @@protoc_insertion_point(field_mutable:InfoField.vcf_field_class)
  return vcf_field_class_.Mutable(index);
}
 void InfoField::set_vcf_field_class(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:InfoField.vcf_field_class)
  vcf_field_class_.Mutable(index)->assign(value);
}
 void InfoField::set_vcf_field_class(int index, const char* value) {
  vcf_field_class_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:InfoField.vcf_field_class)
}
 void InfoField::set_vcf_field_class(int index, const char* value, size_t size) {
  vcf_field_class_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:InfoField.vcf_field_class)
}
 ::std::string* InfoField::add_vcf_field_class() {
  return vcf_field_class_.Add();
}
 void InfoField::add_vcf_field_class(const ::std::string& value) {
  vcf_field_class_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:InfoField.vcf_field_class)
}
 void InfoField::add_vcf_field_class(const char* value) {
  vcf_field_class_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:InfoField.vcf_field_class)
}
 void InfoField::add_vcf_field_class(const char* value, size_t size) {
  vcf_field_class_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:InfoField.vcf_field_class)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
InfoField::vcf_field_class() const {
  // @@protoc_insertion_point(field_list:InfoField.vcf_field_class)
  return vcf_field_class_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
InfoField::mutable_vcf_field_class() {
  // @@protoc_insertion_point(field_mutable_list:InfoField.vcf_field_class)
  return &vcf_field_class_;
}

// optional string length = 4;
bool InfoField::has_length() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InfoField::set_has_length() {
  _has_bits_[0] |= 0x00000008u;
}
void InfoField::clear_has_length() {
  _has_bits_[0] &= ~0x00000008u;
}
void InfoField::clear_length() {
  length_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_length();
}
 const ::std::string& InfoField::length() const {
  // @@protoc_insertion_point(field_get:InfoField.length)
  return length_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InfoField::set_length(const ::std::string& value) {
  set_has_length();
  length_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InfoField.length)
}
 void InfoField::set_length(const char* value) {
  set_has_length();
  length_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InfoField.length)
}
 void InfoField::set_length(const char* value, size_t size) {
  set_has_length();
  length_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InfoField.length)
}
 ::std::string* InfoField::mutable_length() {
  set_has_length();
  // @@protoc_insertion_point(field_mutable:InfoField.length)
  return length_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InfoField::release_length() {
  clear_has_length();
  return length_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InfoField::set_allocated_length(::std::string* length) {
  if (length != NULL) {
    set_has_length();
  } else {
    clear_has_length();
  }
  length_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), length);
  // @@protoc_insertion_point(field_set_allocated:InfoField.length)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Chromosome::kNameFieldNumber;
const int Chromosome::kLengthFieldNumber;
const int Chromosome::kTiledbColumnOffsetFieldNumber;
#endif  // !_MSC_VER

Chromosome::Chromosome()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Chromosome)
}

void Chromosome::InitAsDefaultInstance() {
}

Chromosome::Chromosome(const Chromosome& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Chromosome)
}

void Chromosome::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  length_ = GOOGLE_LONGLONG(0);
  tiledb_column_offset_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Chromosome::~Chromosome() {
  // @@protoc_insertion_point(destructor:Chromosome)
  SharedDtor();
}

void Chromosome::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Chromosome::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Chromosome::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Chromosome_descriptor_;
}

const Chromosome& Chromosome::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_genomicsdb_5fvid_5fmapping_2eproto();
  return *default_instance_;
}

Chromosome* Chromosome::default_instance_ = NULL;

Chromosome* Chromosome::New(::google::protobuf::Arena* arena) const {
  Chromosome* n = new Chromosome;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Chromosome::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Chromosome*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(length_, tiledb_column_offset_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Chromosome::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Chromosome)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Chromosome.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_length;
        break;
      }

      // required int64 length = 2;
      case 2: {
        if (tag == 16) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_tiledb_column_offset;
        break;
      }

      // required int64 tiledb_column_offset = 3;
      case 3: {
        if (tag == 24) {
         parse_tiledb_column_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tiledb_column_offset_)));
          set_has_tiledb_column_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Chromosome)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Chromosome)
  return false;
#undef DO_
}

void Chromosome::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Chromosome)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Chromosome.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required int64 length = 2;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->length(), output);
  }

  // required int64 tiledb_column_offset = 3;
  if (has_tiledb_column_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->tiledb_column_offset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Chromosome)
}

::google::protobuf::uint8* Chromosome::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Chromosome)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Chromosome.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int64 length = 2;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->length(), target);
  }

  // required int64 tiledb_column_offset = 3;
  if (has_tiledb_column_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->tiledb_column_offset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Chromosome)
  return target;
}

int Chromosome::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_length()) {
    // required int64 length = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->length());
  }

  if (has_tiledb_column_offset()) {
    // required int64 tiledb_column_offset = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tiledb_column_offset());
  }

  return total_size;
}
int Chromosome::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required int64 length = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->length());

    // required int64 tiledb_column_offset = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tiledb_column_offset());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Chromosome::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Chromosome* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Chromosome>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Chromosome::MergeFrom(const Chromosome& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_tiledb_column_offset()) {
      set_tiledb_column_offset(from.tiledb_column_offset());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Chromosome::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chromosome::CopyFrom(const Chromosome& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chromosome::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Chromosome::Swap(Chromosome* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Chromosome::InternalSwap(Chromosome* other) {
  name_.Swap(&other->name_);
  std::swap(length_, other->length_);
  std::swap(tiledb_column_offset_, other->tiledb_column_offset_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Chromosome::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Chromosome_descriptor_;
  metadata.reflection = Chromosome_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Chromosome

// required string name = 1;
bool Chromosome::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Chromosome::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Chromosome::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Chromosome::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Chromosome::name() const {
  // @@protoc_insertion_point(field_get:Chromosome.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Chromosome::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Chromosome.name)
}
 void Chromosome::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Chromosome.name)
}
 void Chromosome::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Chromosome.name)
}
 ::std::string* Chromosome::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Chromosome.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Chromosome::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Chromosome::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Chromosome.name)
}

// required int64 length = 2;
bool Chromosome::has_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Chromosome::set_has_length() {
  _has_bits_[0] |= 0x00000002u;
}
void Chromosome::clear_has_length() {
  _has_bits_[0] &= ~0x00000002u;
}
void Chromosome::clear_length() {
  length_ = GOOGLE_LONGLONG(0);
  clear_has_length();
}
 ::google::protobuf::int64 Chromosome::length() const {
  // @@protoc_insertion_point(field_get:Chromosome.length)
  return length_;
}
 void Chromosome::set_length(::google::protobuf::int64 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:Chromosome.length)
}

// required int64 tiledb_column_offset = 3;
bool Chromosome::has_tiledb_column_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Chromosome::set_has_tiledb_column_offset() {
  _has_bits_[0] |= 0x00000004u;
}
void Chromosome::clear_has_tiledb_column_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
void Chromosome::clear_tiledb_column_offset() {
  tiledb_column_offset_ = GOOGLE_LONGLONG(0);
  clear_has_tiledb_column_offset();
}
 ::google::protobuf::int64 Chromosome::tiledb_column_offset() const {
  // @@protoc_insertion_point(field_get:Chromosome.tiledb_column_offset)
  return tiledb_column_offset_;
}
 void Chromosome::set_tiledb_column_offset(::google::protobuf::int64 value) {
  set_has_tiledb_column_offset();
  tiledb_column_offset_ = value;
  // @@protoc_insertion_point(field_set:Chromosome.tiledb_column_offset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int VidMappingPB::kInfofieldsFieldNumber;
const int VidMappingPB::kChromosomesFieldNumber;
#endif  // !_MSC_VER

VidMappingPB::VidMappingPB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VidMappingPB)
}

void VidMappingPB::InitAsDefaultInstance() {
}

VidMappingPB::VidMappingPB(const VidMappingPB& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VidMappingPB)
}

void VidMappingPB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VidMappingPB::~VidMappingPB() {
  // @@protoc_insertion_point(destructor:VidMappingPB)
  SharedDtor();
}

void VidMappingPB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VidMappingPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VidMappingPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VidMappingPB_descriptor_;
}

const VidMappingPB& VidMappingPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_genomicsdb_5fvid_5fmapping_2eproto();
  return *default_instance_;
}

VidMappingPB* VidMappingPB::default_instance_ = NULL;

VidMappingPB* VidMappingPB::New(::google::protobuf::Arena* arena) const {
  VidMappingPB* n = new VidMappingPB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VidMappingPB::Clear() {
  infofields_.Clear();
  chromosomes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool VidMappingPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VidMappingPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .InfoField infofields = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_infofields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_infofields()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_infofields;
        if (input->ExpectTag(18)) goto parse_loop_chromosomes;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .Chromosome chromosomes = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_chromosomes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_chromosomes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_chromosomes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VidMappingPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VidMappingPB)
  return false;
#undef DO_
}

void VidMappingPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VidMappingPB)
  // repeated .InfoField infofields = 1;
  for (unsigned int i = 0, n = this->infofields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infofields(i), output);
  }

  // repeated .Chromosome chromosomes = 2;
  for (unsigned int i = 0, n = this->chromosomes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->chromosomes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VidMappingPB)
}

::google::protobuf::uint8* VidMappingPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VidMappingPB)
  // repeated .InfoField infofields = 1;
  for (unsigned int i = 0, n = this->infofields_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infofields(i), target);
  }

  // repeated .Chromosome chromosomes = 2;
  for (unsigned int i = 0, n = this->chromosomes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->chromosomes(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VidMappingPB)
  return target;
}

int VidMappingPB::ByteSize() const {
  int total_size = 0;

  // repeated .InfoField infofields = 1;
  total_size += 1 * this->infofields_size();
  for (int i = 0; i < this->infofields_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infofields(i));
  }

  // repeated .Chromosome chromosomes = 2;
  total_size += 1 * this->chromosomes_size();
  for (int i = 0; i < this->chromosomes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chromosomes(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VidMappingPB::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VidMappingPB* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VidMappingPB>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VidMappingPB::MergeFrom(const VidMappingPB& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  infofields_.MergeFrom(from.infofields_);
  chromosomes_.MergeFrom(from.chromosomes_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void VidMappingPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VidMappingPB::CopyFrom(const VidMappingPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VidMappingPB::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->infofields())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->chromosomes())) return false;
  return true;
}

void VidMappingPB::Swap(VidMappingPB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VidMappingPB::InternalSwap(VidMappingPB* other) {
  infofields_.UnsafeArenaSwap(&other->infofields_);
  chromosomes_.UnsafeArenaSwap(&other->chromosomes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VidMappingPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VidMappingPB_descriptor_;
  metadata.reflection = VidMappingPB_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VidMappingPB

// repeated .InfoField infofields = 1;
int VidMappingPB::infofields_size() const {
  return infofields_.size();
}
void VidMappingPB::clear_infofields() {
  infofields_.Clear();
}
const ::InfoField& VidMappingPB::infofields(int index) const {
  // @@protoc_insertion_point(field_get:VidMappingPB.infofields)
  return infofields_.Get(index);
}
::InfoField* VidMappingPB::mutable_infofields(int index) {
  // @@protoc_insertion_point(field_mutable:VidMappingPB.infofields)
  return infofields_.Mutable(index);
}
::InfoField* VidMappingPB::add_infofields() {
  // @@protoc_insertion_point(field_add:VidMappingPB.infofields)
  return infofields_.Add();
}
::google::protobuf::RepeatedPtrField< ::InfoField >*
VidMappingPB::mutable_infofields() {
  // @@protoc_insertion_point(field_mutable_list:VidMappingPB.infofields)
  return &infofields_;
}
const ::google::protobuf::RepeatedPtrField< ::InfoField >&
VidMappingPB::infofields() const {
  // @@protoc_insertion_point(field_list:VidMappingPB.infofields)
  return infofields_;
}

// repeated .Chromosome chromosomes = 2;
int VidMappingPB::chromosomes_size() const {
  return chromosomes_.size();
}
void VidMappingPB::clear_chromosomes() {
  chromosomes_.Clear();
}
const ::Chromosome& VidMappingPB::chromosomes(int index) const {
  // @@protoc_insertion_point(field_get:VidMappingPB.chromosomes)
  return chromosomes_.Get(index);
}
::Chromosome* VidMappingPB::mutable_chromosomes(int index) {
  // @@protoc_insertion_point(field_mutable:VidMappingPB.chromosomes)
  return chromosomes_.Mutable(index);
}
::Chromosome* VidMappingPB::add_chromosomes() {
  // @@protoc_insertion_point(field_add:VidMappingPB.chromosomes)
  return chromosomes_.Add();
}
::google::protobuf::RepeatedPtrField< ::Chromosome >*
VidMappingPB::mutable_chromosomes() {
  // @@protoc_insertion_point(field_mutable_list:VidMappingPB.chromosomes)
  return &chromosomes_;
}
const ::google::protobuf::RepeatedPtrField< ::Chromosome >&
VidMappingPB::chromosomes() const {
  // @@protoc_insertion_point(field_list:VidMappingPB.chromosomes)
  return chromosomes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
